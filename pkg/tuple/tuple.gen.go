package tuple

import (
	"fmt"
	runtime "github.com/akishichinibu/goadt/pkg/runtime"
)

// Code generated by goadt. DO NOT EDIT.
// nolint

// Tuple2 is a generic tuple type that holds 2 values of types Tn.
type Tuple2[T1 any, T2 any] struct {
	t1 T1
	t2 T2
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple2[T1, T2]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple2[T1, T2]) Get2() T2 {
	return t.t2
}

// Unwrap returns all values in the tuple.
func (t *Tuple2[T1, T2]) Unwrap() (T1, T2) {
	return t.t1, t.t2
}
func NewTuple2[T1 any, T2 any](t1 T1, t2 T2) Tuple2[T1, T2] {
	return Tuple2[T1, T2]{t1: t1, t2: t2}
}
func (t *Tuple2[T1, T2]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple2[T1, T2]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 2 {
		return fmt.Errorf("expected %d values, got %d", 2, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	return nil
}

// Tuple3 is a generic tuple type that holds 3 values of types Tn.
type Tuple3[T1 any, T2 any, T3 any] struct {
	t1 T1
	t2 T2
	t3 T3
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple3[T1, T2, T3]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple3[T1, T2, T3]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple3[T1, T2, T3]) Get3() T3 {
	return t.t3
}

// Unwrap returns all values in the tuple.
func (t *Tuple3[T1, T2, T3]) Unwrap() (T1, T2, T3) {
	return t.t1, t.t2, t.t3
}
func NewTuple3[T1 any, T2 any, T3 any](t1 T1, t2 T2, t3 T3) Tuple3[T1, T2, T3] {
	return Tuple3[T1, T2, T3]{t1: t1, t2: t2, t3: t3}
}
func (t *Tuple3[T1, T2, T3]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple3[T1, T2, T3]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 3 {
		return fmt.Errorf("expected %d values, got %d", 3, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	return nil
}

// Tuple4 is a generic tuple type that holds 4 values of types Tn.
type Tuple4[T1 any, T2 any, T3 any, T4 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple4[T1, T2, T3, T4]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple4[T1, T2, T3, T4]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple4[T1, T2, T3, T4]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple4[T1, T2, T3, T4]) Get4() T4 {
	return t.t4
}

// Unwrap returns all values in the tuple.
func (t *Tuple4[T1, T2, T3, T4]) Unwrap() (T1, T2, T3, T4) {
	return t.t1, t.t2, t.t3, t.t4
}
func NewTuple4[T1 any, T2 any, T3 any, T4 any](t1 T1, t2 T2, t3 T3, t4 T4) Tuple4[T1, T2, T3, T4] {
	return Tuple4[T1, T2, T3, T4]{t1: t1, t2: t2, t3: t3, t4: t4}
}
func (t *Tuple4[T1, T2, T3, T4]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple4[T1, T2, T3, T4]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 4 {
		return fmt.Errorf("expected %d values, got %d", 4, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	return nil
}

// Tuple5 is a generic tuple type that holds 5 values of types Tn.
type Tuple5[T1 any, T2 any, T3 any, T4 any, T5 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
	t5 T5
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Get5() T5 {
	return t.t5
}

// Unwrap returns all values in the tuple.
func (t *Tuple5[T1, T2, T3, T4, T5]) Unwrap() (T1, T2, T3, T4, T5) {
	return t.t1, t.t2, t.t3, t.t4, t.t5
}
func NewTuple5[T1 any, T2 any, T3 any, T4 any, T5 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5) Tuple5[T1, T2, T3, T4, T5] {
	return Tuple5[T1, T2, T3, T4, T5]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5}
}
func (t *Tuple5[T1, T2, T3, T4, T5]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple5[T1, T2, T3, T4, T5]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 5 {
		return fmt.Errorf("expected %d values, got %d", 5, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	return nil
}

// Tuple6 is a generic tuple type that holds 6 values of types Tn.
type Tuple6[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
	t5 T5
	t6 T6
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get5() T5 {
	return t.t5
}

// Get6 returns the 6th value in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Get6() T6 {
	return t.t6
}

// Unwrap returns all values in the tuple.
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) Unwrap() (T1, T2, T3, T4, T5, T6) {
	return t.t1, t.t2, t.t3, t.t4, t.t5, t.t6
}
func NewTuple6[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6) Tuple6[T1, T2, T3, T4, T5, T6] {
	return Tuple6[T1, T2, T3, T4, T5, T6]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5, t6: t6}
}
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5, t.t6}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple6[T1, T2, T3, T4, T5, T6]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 6 {
		return fmt.Errorf("expected %d values, got %d", 6, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	t.t6, ok = vs[5].(T6)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t6, vs[5])
	}
	return nil
}

// Tuple7 is a generic tuple type that holds 7 values of types Tn.
type Tuple7[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
	t5 T5
	t6 T6
	t7 T7
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get5() T5 {
	return t.t5
}

// Get6 returns the 6th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get6() T6 {
	return t.t6
}

// Get7 returns the 7th value in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Get7() T7 {
	return t.t7
}

// Unwrap returns all values in the tuple.
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) Unwrap() (T1, T2, T3, T4, T5, T6, T7) {
	return t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7
}
func NewTuple7[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7) Tuple7[T1, T2, T3, T4, T5, T6, T7] {
	return Tuple7[T1, T2, T3, T4, T5, T6, T7]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5, t6: t6, t7: t7}
}
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple7[T1, T2, T3, T4, T5, T6, T7]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 7 {
		return fmt.Errorf("expected %d values, got %d", 7, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	t.t6, ok = vs[5].(T6)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t6, vs[5])
	}
	t.t7, ok = vs[6].(T7)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t7, vs[6])
	}
	return nil
}

// Tuple8 is a generic tuple type that holds 8 values of types Tn.
type Tuple8[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
	t5 T5
	t6 T6
	t7 T7
	t8 T8
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get5() T5 {
	return t.t5
}

// Get6 returns the 6th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get6() T6 {
	return t.t6
}

// Get7 returns the 7th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get7() T7 {
	return t.t7
}

// Get8 returns the 8th value in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Get8() T8 {
	return t.t8
}

// Unwrap returns all values in the tuple.
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) Unwrap() (T1, T2, T3, T4, T5, T6, T7, T8) {
	return t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8
}
func NewTuple8[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8) Tuple8[T1, T2, T3, T4, T5, T6, T7, T8] {
	return Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5, t6: t6, t7: t7, t8: t8}
}
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple8[T1, T2, T3, T4, T5, T6, T7, T8]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 8 {
		return fmt.Errorf("expected %d values, got %d", 8, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	t.t6, ok = vs[5].(T6)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t6, vs[5])
	}
	t.t7, ok = vs[6].(T7)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t7, vs[6])
	}
	t.t8, ok = vs[7].(T8)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t8, vs[7])
	}
	return nil
}

// Tuple9 is a generic tuple type that holds 9 values of types Tn.
type Tuple9[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any] struct {
	t1 T1
	t2 T2
	t3 T3
	t4 T4
	t5 T5
	t6 T6
	t7 T7
	t8 T8
	t9 T9
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get5() T5 {
	return t.t5
}

// Get6 returns the 6th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get6() T6 {
	return t.t6
}

// Get7 returns the 7th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get7() T7 {
	return t.t7
}

// Get8 returns the 8th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get8() T8 {
	return t.t8
}

// Get9 returns the 9th value in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Get9() T9 {
	return t.t9
}

// Unwrap returns all values in the tuple.
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) Unwrap() (T1, T2, T3, T4, T5, T6, T7, T8, T9) {
	return t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8, t.t9
}
func NewTuple9[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9) Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9] {
	return Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5, t6: t6, t7: t7, t8: t8, t9: t9}
}
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8, t.t9}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 9 {
		return fmt.Errorf("expected %d values, got %d", 9, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	t.t6, ok = vs[5].(T6)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t6, vs[5])
	}
	t.t7, ok = vs[6].(T7)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t7, vs[6])
	}
	t.t8, ok = vs[7].(T8)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t8, vs[7])
	}
	t.t9, ok = vs[8].(T9)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t9, vs[8])
	}
	return nil
}

// Tuple10 is a generic tuple type that holds 10 values of types Tn.
type Tuple10[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any] struct {
	t1  T1
	t2  T2
	t3  T3
	t4  T4
	t5  T5
	t6  T6
	t7  T7
	t8  T8
	t9  T9
	t10 T10
}

// Get1 returns the 1th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get1() T1 {
	return t.t1
}

// Get2 returns the 2th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get2() T2 {
	return t.t2
}

// Get3 returns the 3th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get3() T3 {
	return t.t3
}

// Get4 returns the 4th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get4() T4 {
	return t.t4
}

// Get5 returns the 5th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get5() T5 {
	return t.t5
}

// Get6 returns the 6th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get6() T6 {
	return t.t6
}

// Get7 returns the 7th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get7() T7 {
	return t.t7
}

// Get8 returns the 8th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get8() T8 {
	return t.t8
}

// Get9 returns the 9th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get9() T9 {
	return t.t9
}

// Get10 returns the 10th value in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Get10() T10 {
	return t.t10
}

// Unwrap returns all values in the tuple.
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) Unwrap() (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) {
	return t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8, t.t9, t.t10
}
func NewTuple10[T1 any, T2 any, T3 any, T4 any, T5 any, T6 any, T7 any, T8 any, T9 any, T10 any](t1 T1, t2 T2, t3 T3, t4 T4, t5 T5, t6 T6, t7 T7, t8 T8, t9 T9, t10 T10) Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10] {
	return Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]{t1: t1, t2: t2, t3: t3, t4: t4, t5: t5, t6: t6, t7: t7, t8: t8, t9: t9, t10: t10}
}
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) MarshalJSON() ([]byte, error) {
	vs := []any{t.t1, t.t2, t.t3, t.t4, t.t5, t.t6, t.t7, t.t8, t.t9, t.t10}
	return runtime.MarshalJSON(vs)
}
func (t *Tuple10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]) UnmarshalJSON(data []byte) error {
	var vs []any
	if err := runtime.UnmarshalJSON(data, &vs); err != nil {
		return err
	}
	if len(vs) != 10 {
		return fmt.Errorf("expected %d values, got %d", 10, len(vs))
	}

	var ok bool
	t.t1, ok = vs[0].(T1)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t1, vs[0])
	}
	t.t2, ok = vs[1].(T2)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t2, vs[1])
	}
	t.t3, ok = vs[2].(T3)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t3, vs[2])
	}
	t.t4, ok = vs[3].(T4)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t4, vs[3])
	}
	t.t5, ok = vs[4].(T5)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t5, vs[4])
	}
	t.t6, ok = vs[5].(T6)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t6, vs[5])
	}
	t.t7, ok = vs[6].(T7)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t7, vs[6])
	}
	t.t8, ok = vs[7].(T8)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t8, vs[7])
	}
	t.t9, ok = vs[8].(T9)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t9, vs[8])
	}
	t.t10, ok = vs[9].(T10)
	if !ok {
		return fmt.Errorf("expected type %T, got %T", t.t10, vs[9])
	}
	return nil
}
